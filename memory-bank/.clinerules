# AvailableX プロジェクトルール

## コーディング規約

1. **TypeScriptの厳格な型付け**
   - 明示的な型定義を使用する
   - `any`型の使用を避ける
   - 関数の引数と戻り値に型アノテーションを付ける

2. **コンポーネント設計**
   - 関数コンポーネントとReact Hooksを優先する
   - 大きなコンポーネントは小さな責任を持つコンポーネントに分割する
   - Propsの受け渡しは明示的に行い、過剰な伝播を避ける

3. **状態管理**
   - グローバル状態はReact Context + useReducerで管理
   - ローカル状態はuseStateで管理
   - 状態更新は常にイミュータブルに行う

4. **エラー処理**
   - try-catchブロックを使用して例外を適切に処理する
   - ユーザーフレンドリーなエラーメッセージを表示する
   - デバッグ情報はコンソールに出力する

5. **パフォーマンス最適化**
   - 不要な再レンダリングを避けるためにメモ化（useMemo, useCallback）を使用する
   - 大きなリストはwindowingテクニックを検討する
   - 重い計算は必要な時だけ行う

## プロジェクト固有のパターン

1. **日時データの処理**
   - 内部では常にUTCで日時を扱う
   - 表示時にのみローカルタイムゾーンに変換する
   - date-fnsライブラリを一貫して使用する

2. **URL処理**
   - スケジュールデータはURLクエリパラメータとして保存
   - エンコード/デコードは専用の関数を使用
   - URLの長さ制限を考慮した効率的なエンコーディングを使用

3. **React Big Calendarのカスタマイズ**
   - 週表示をデフォルトとする
   - 15分単位のスロット表示を使用
   - カスタムフォーマッターを使用して日本語表示に対応

4. **テーマ管理**
   - Tailwind CSSの'class'モードを使用
   - テーマ切替はコンテキスト経由で管理
   - ダークモード対応のカラーパレットを使用

## 既知の問題と対処法

1. **React 18 Strict Modeによる二重レンダリング**
   - 問題: 開発環境でのStrict Modeにより、コンポーネントが二回マウントされ、イベントハンドラが二重に発火する
   - 対処法: next.config.tsで`reactStrictMode: false`を設定して無効化

2. **カレンダー選択操作での重複データ生成**
   - 問題: 1回の範囲選択操作で2つの同じデータが追加される
   - 対処法:
     - 選択処理中フラグを使用して重複処理を防止
     - 選択データのハッシュ化による重複チェック
     - デバウンス処理による連続イベントの抑制

3. **モバイルでのドラッグ操作の最適化**
   - 問題: タッチデバイスでのドラッグ操作が直感的でない
   - 対処法: タッチイベントの最適化（進行中）

## 開発ワークフロー

1. **機能追加の流れ**
   - 要件の明確化
   - コンポーネント設計
   - 型定義の作成
   - 実装
   - テスト
   - ドキュメント更新

2. **バグ修正の流れ**
   - 問題の再現
   - 根本原因の特定
   - 修正案の検討
   - 修正の実装
   - テストによる確認
   - ドキュメント更新

3. **コードレビューのポイント**
   - 型の正確さ
   - パフォーマンスへの影響
   - エラー処理の適切さ
   - コードの可読性
   - テストの網羅性

## ユーザー体験の原則

1. **シンプルさの優先**
   - 必要最小限のUIで目的を達成する
   - 複雑な操作は避け、直感的な操作を心がける

2. **フィードバックの即時性**
   - ユーザーの操作に対して即座にフィードバックを提供する
   - 処理中は適切な表示を行う

3. **エラーの親切な伝達**
   - エラーメッセージは具体的で行動指針を含める
   - 技術的な詳細よりも解決策を優先する

4. **アクセシビリティの確保**
   - キーボード操作のサポート
   - スクリーンリーダー対応
   - 十分なコントラスト比の確保

## 今後の拡張に関する注意点

1. **QRコード生成機能**
   - 軽量なライブラリを選択する
   - クライアントサイドでの生成を基本とする
   - 高解像度と低解像度の両方をサポートする

2. **多言語対応**
   - テキストリソースを集中管理する
   - 日付/時刻のフォーマットはロケールに応じて変更する
   - 右から左へ記述する言語（RTL）も考慮する

3. **モバイル最適化**
   - タッチ操作の精度向上
   - 画面サイズに応じたレイアウト調整
   - ネイティブアプリのような操作感を目指す
