# AvailableX プロジェクトルール

## プロジェクト固有のパターン

### コーディングスタイル
1. **TypeScript**
   - 厳格な型付けを使用（`strict: true`）
   - インターフェースよりも型エイリアス（`type`）を優先
   - 非同期処理には`async/await`を使用

2. **React**
   - 関数コンポーネントとReact Hooksを使用
   - Propsには明示的な型定義
   - コンポーネントは小さく保ち、単一責任の原則に従う

3. **ファイル構造**
   - 機能ごとにディレクトリを分ける
   - コンポーネントは`components/`ディレクトリに配置
   - ユーティリティ関数は`utils/`ディレクトリに配置
   - 型定義は`types/`ディレクトリに配置
   - エンコード/デコードロジックは`lib/`ディレクトリに配置

### 命名規則
1. **ファイル名**
   - コンポーネント: PascalCase（例: `Calendar.tsx`）
   - ユーティリティ/ライブラリ: camelCase（例: `format.ts`）
   - 型定義: camelCase（例: `schedule.ts`）

2. **変数/関数名**
   - 変数/関数: camelCase（例: `handleDateSelect`）
   - 定数: UPPER_SNAKE_CASE（例: `MAX_TIME_RANGES`）
   - 型/インターフェース: PascalCase（例: `TimeRange`）

3. **CSS**
   - Tailwind CSSのユーティリティクラスを優先
   - カスタムクラス名はケバブケース（例: `date-range-selector`）

## プロジェクト固有の知識

### データ形式
1. **日時範囲のデータ構造**
   ```typescript
   interface TimeRange {
     startIndex: number; // 0-95 (15分単位、00:00-23:45)
     endIndex: number;   // 0-95 (15分単位、00:00-23:45)
   }

   interface DateRange {
     relativeDay: number; // 基準日からの相対日数
     timeRanges: TimeRange[];
   }

   interface ScheduleData {
     baseDate: string; // YYYYMMDD形式
     dateRanges: DateRange[];
   }
   ```

2. **URLエンコーディング形式**
   - 形式: `基準日_(相対日数):(開始インデックス)-(終了インデックス),…;(相対日数):...`
   - 例: `20250301_0:32-36,48-52;1:32-36`
   - 実装: `encode.ts`と`decode.ts`で実装

### 重要な実装パス
1. **日時選択フロー**
   - カレンダーUIでの選択 → `Calendar.tsx`の`handleSelectSlot`関数 → `ScheduleContext.tsx`の`dispatch({ type: 'ADD_TIME_RANGE' })`アクション → テキスト表示の更新 → URL生成

2. **URL共有フロー**
   - `TextDisplay.tsx`の「URLをコピー」ボタンクリック → `generateUrl`関数 → `encodeScheduleForUrl`関数 → クリップボードへのコピー

3. **URL読み込みフロー**
   - `ScheduleProvider`の`useEffect`フック → URLからのパラメータ取得 → `decodeScheduleFromUrl`関数 → `dispatch({ type: 'SET_SCHEDULE' })`アクション → カレンダーUIの更新

4. **テーマ切替フロー**
   - `ThemeToggle.tsx`の切替ボタンクリック → `toggleTheme`関数 → `document.documentElement.classList`の更新 → `dispatch({ type: 'SET_THEME' })`アクション → UIの更新

## 開発ワークフロー

### 開発環境
- Next.js開発サーバー: `npm run dev`
- ESLint: `npm run lint`
- ビルド: `npm run build`

### デプロイ
- 静的サイトとしてVercelにデプロイ予定
- 本番ビルド: `npm run build`
- 静的ファイルは`out`ディレクトリに出力

## 実装から学んだこと

### React Big Calendarのカスタマイズ
- ドラッグ＆ドロップ機能は`onSelectSlot`イベントハンドラーで実装
- イベントの表示スタイルは`eventPropGetter`で制御
- ダークモードは`.rbc-dark-theme`クラスとカスタムCSSで実装

### Next.jsのクライアントコンポーネント
- すべてのReact Hooksを使用するコンポーネントには`'use client'`ディレクティブが必要
- 動的インポートには`{ ssr: false }`オプションが必要

### Tailwind CSSのダークモード
- `darkMode: 'class'`設定でシステム設定に自動追従しないダークモードを実装
- `document.documentElement.classList`の操作でダークモードを切り替え

### 効率的なデータ構造
- 相対日数を使用することで、基準日を変更するだけで全体の日付を調整可能
- 時間インデックス（0-95）を使用することで、15分単位の時間を効率的に表現

## 既知の課題と対策

### React Big Calendarのさらなるカスタマイズ
- モバイルでのドラッグ＆ドロップ操作の最適化が必要
- タッチイベントの処理を改善する余地あり

### URLの長さ制限
- 現在のエンコーディング方式は基本的な実装
- より効率的な圧縮アルゴリズムの検討が必要
- 必要に応じてローカルストレージを補助的に使用

### ブラウザ互換性
- クロスブラウザテストをさらに実施する必要あり
- モバイルデバイスでの動作検証が必要
- レスポンシブデザインのさらなる最適化

## ユーザー体験の優先事項
1. シンプルで直感的なUI
2. 最小限のクリックで操作完了
3. 視覚的に分かりやすいカレンダー表示
4. 高速な読み込みと応答性
5. アクセシビリティの確保
