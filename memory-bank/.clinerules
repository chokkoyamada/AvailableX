# AvailableX プロジェクトルール

## プロジェクト固有のパターン

### コーディングスタイル
1. **TypeScript**
   - 厳格な型付けを使用（`strict: true`）
   - インターフェースよりも型エイリアス（`type`）を優先
   - 非同期処理には`async/await`を使用

2. **React**
   - 関数コンポーネントとReact Hooksを使用
   - Propsには明示的な型定義
   - コンポーネントは小さく保ち、単一責任の原則に従う

3. **ファイル構造**
   - 機能ごとにディレクトリを分ける
   - コンポーネントは`components/`ディレクトリに配置
   - ユーティリティ関数は`utils/`ディレクトリに配置
   - 型定義は`types/`ディレクトリに配置
   - エンコード/デコードロジックは`lib/`ディレクトリに配置

### 命名規則
1. **ファイル名**
   - コンポーネント: PascalCase（例: `Calendar.tsx`）
   - ユーティリティ/ライブラリ: camelCase（例: `format.ts`）
   - 型定義: camelCase（例: `schedule.ts`）

2. **変数/関数名**
   - 変数/関数: camelCase（例: `handleDateSelect`）
   - 定数: UPPER_SNAKE_CASE（例: `MAX_TIME_RANGES`）
   - 型/インターフェース: PascalCase（例: `TimeRange`）

3. **CSS**
   - Tailwind CSSのユーティリティクラスを優先
   - カスタムクラス名はケバブケース（例: `date-range-selector`）

## プロジェクト固有の知識

### データ形式
1. **日時範囲のデータ構造**
   ```typescript
   type TimeRange = {
     startIndex: number;
     endIndex: number;
   };

   type DateRanges = {
     relativeDay: number;
     timeRanges: TimeRange[];
   };

   type ScheduleData = {
     baseDate: string; // YYYYMMDD
     dateRanges: DateRanges[];
   };
   ```

2. **URLエンコーディング形式**
   - 形式: `基準日_(相対日数):(開始インデックス)-(終了インデックス),…;(相対日数):...`
   - 例: `20250301_24:54-69,84-96;25:60-72`

### 重要な実装パス
1. **日時選択フロー**
   - カレンダーUIでの選択 → データストアへの保存 → テキスト表示の更新 → URL生成

2. **URL共有フロー**
   - データストアからのデータ取得 → エンコード → URL生成 → クリップボードへのコピー

3. **URL読み込みフロー**
   - URLからのパラメータ取得 → デコード → データストアへの保存 → カレンダーUIの更新

## 開発ワークフロー

### 開発環境
- Next.js開発サーバー: `npm run dev`
- ESLint: `npm run lint`
- ビルド: `npm run build`

### デプロイ
- 静的サイトとしてVercelにデプロイ予定
- 本番ビルド: `npm run build`
- 静的ファイルは`out`ディレクトリに出力

## 既知の課題と対策

### React Big Calendarのカスタマイズ
- ドラッグ＆ドロップ機能の実装には、カスタムコンポーネントの拡張が必要
- 時間範囲の選択には、カスタムイベントハンドラーを実装

### URLの長さ制限
- 効率的なエンコーディング方式を開発
- 必要に応じてローカルストレージを補助的に使用

### ブラウザ互換性
- クロスブラウザテストを実施
- 必要に応じてポリフィルを使用
- レスポンシブデザインを徹底

## ユーザー体験の優先事項
1. シンプルで直感的なUI
2. 最小限のクリックで操作完了
3. 視覚的に分かりやすいカレンダー表示
4. 高速な読み込みと応答性
5. アクセシビリティの確保
